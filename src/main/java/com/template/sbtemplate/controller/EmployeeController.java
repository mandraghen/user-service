package com.template.sbtemplate.controller;

import com.template.sbtemplate.dto.EmployeeDto;
import com.template.sbtemplate.dto.Scope;
import com.template.sbtemplate.service.EmployeeService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/employee")
@RequiredArgsConstructor
@Tag(name = "Employee", description = "Employee management APIs")
public class EmployeeController {
    private final EmployeeService employeeService;

    @Operation(
            summary = "Create a new employee",
            description = "Create an employee. Returns the created employee or 409 if it already exists by id or by " +
                    "email. It creates relations and new entities if they don't exist.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Employee created",
                            content = @Content(schema = @Schema(implementation = EmployeeDto.class))),
                    @ApiResponse(responseCode = "409", description = "Employee already exists",
                            content = @Content)
            }
    )
    @PostMapping
    public ResponseEntity<EmployeeDto> create(@RequestBody @Valid EmployeeDto employeeDto) {
        return employeeService.create(employeeDto)
                .map(ResponseEntity::ok)
                .orElseGet(() -> {
                    log.debug("Employee with id {} or email {} already exists",
                            employeeDto.getId(), employeeDto.getEmail());
                    return ResponseEntity.status(HttpStatus.CONFLICT).build();
                });
    }

    @Operation(
            summary = "Get an employee by ID",
            description = "Returns the employee with the given ID. Returns 404 if not found.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Employee found",
                            content = @Content(schema = @Schema(implementation = EmployeeDto.class))),
                    @ApiResponse(responseCode = "404", description = "Employee not found",
                            content = @Content)
            }
    )
    @GetMapping("/{id}")
    public ResponseEntity<EmployeeDto> get(@PathVariable Long id, @RequestParam(required = false) Scope scope) {
        return employeeService.get(id, scope)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Operation(
            summary = "Update an employee",
            description = "Create or update an employee. If the employee exists, it will be updated; otherwise, " +
                    "a new one will be created. In the latter case the id must be not existing, even if it will be " +
                    "ignored and autogenerated. It updates relations, but other entities must exist to be " +
                    "associated.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Employee created or updated",
                            content = @Content(schema = @Schema(implementation = EmployeeDto.class))),
                    @ApiResponse(responseCode = "400", description = "If the relation entities do not exist by id",
                            content = @Content(schema = @Schema(implementation = String.class)))
            }
    )
    @PutMapping("/{id}")
    public ResponseEntity<EmployeeDto> update(@PathVariable Long id, @RequestBody EmployeeDto employeeDto) {
        return ResponseEntity.ok(employeeService.update(id, employeeDto));
    }

    @Operation(
            summary = "Delete an employee",
            description = "Deletes the employee with the given ID. Returns 204 if deleted successfully or if the " +
                    "employee does not exist.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Employee deleted", content = @Content)
            }
    )
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        employeeService.delete(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}