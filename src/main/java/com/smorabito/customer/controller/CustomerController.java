package com.smorabito.customer.controller;

import com.smorabito.customer.dto.CustomerDto;
import com.smorabito.customer.dto.Scope;
import com.smorabito.customer.service.CustomerService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Slf4j
@RestController
@RequestMapping("/customer")
@RequiredArgsConstructor
@Tag(name = "Customer", description = "Customer management APIs")
public class CustomerController {
    private final CustomerService customerService;

    @Operation(
            summary = "Create a new customer",
            description = "Create a customer. Returns the created customer or 409 if it already exists by id or by " +
                    "email. It creates relations and new entities if they don't exist.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Customer created",
                            content = @Content(schema = @Schema(implementation = CustomerDto.class))),
                    @ApiResponse(responseCode = "409", description = "Customer already exists",
                            content = @Content)
            }
    )
    @PostMapping
    public ResponseEntity<CustomerDto> create(@RequestBody @Valid CustomerDto customerDto) {
        return customerService.create(customerDto)
                .map(ResponseEntity::ok)
                .orElseGet(() -> {
                    log.debug("Customer with id {} or email {} already exists",
                            customerDto.getId(), customerDto.getEmail());
                    return ResponseEntity.status(HttpStatus.CONFLICT).build();
                });
    }

    @Operation(
            summary = "Get a customer by ID",
            description = "Returns the customer with the given ID. Returns 404 if not found.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Customer found",
                            content = @Content(schema = @Schema(implementation = CustomerDto.class))),
                    @ApiResponse(responseCode = "404", description = "Customer not found",
                            content = @Content)
            }
    )
    @GetMapping("/{id}")
    public ResponseEntity<CustomerDto> get(@PathVariable Long id, @RequestParam(required = false) Scope scope) {
        return customerService.get(id, scope)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Operation(
            summary = "Update a customer",
            description = "Create or update a customer. If the customer exists, it will be updated; otherwise, " +
                    "a new one will be created. In the latter case the id must be not existing, even if it will be " +
                    "ignored and autogenerated. It updates relations, but other entities must exist to be " +
                    "associated.",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Customer created or updated",
                            content = @Content(schema = @Schema(implementation = CustomerDto.class)))
            }
    )
    @PutMapping("/{id}")
    public ResponseEntity<CustomerDto> update(@PathVariable Long id, @RequestBody @Valid CustomerDto customerDto) {
        return ResponseEntity.ok(customerService.update(id, customerDto));
    }

    @Operation(
            summary = "Delete a customer",
            description = "Deletes the customer with the given ID. Returns 204 if deleted successfully or if the " +
                    "customer does not exist.",
            responses = {
                    @ApiResponse(responseCode = "204", description = "Customer deleted", content = @Content)
            }
    )
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        customerService.delete(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }
}