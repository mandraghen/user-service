plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.2.0.5505"
    id 'org.hibernate.orm' version '6.6.13.Final'
}

group = 'com.template'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    sonarOrganization = "mandraghen"
    sonarProjectKey = sonarOrganization + "_" + project.name

    redissonVersion = '3.49.0'
    springDocVersion = '2.8.9'
    redisTestcontainersVersion = '2.2.4'
    mapstructVersion = '1.6.3'
}

repositories {
    mavenCentral()
}

dependencies {
    // Core
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Extensions
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'org.liquibase:liquibase-core'
    implementation "org.redisson:redisson-hibernate-6:${redissonVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    runtimeOnly 'org.postgresql:postgresql'

    // Testing
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "com.redis:testcontainers-redis:${redisTestcontainersVersion}"
    testImplementation 'org.mockito:mockito-core'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

sonar {
    properties {
        property "sonar.projectKey", sonarProjectKey
        property "sonar.organization", sonarOrganization
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**/domain/**/*,**/generated/**,**/build/**,**/*\$*.class,**/lombok/**," +
                "com/template/sbtemplate/integration/**"
    }
}

test {
    jvmArgs += [
            "-javaagent:${configurations.testRuntimeClasspath.find { it.name.contains('mockito-core') }}"
    ]
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}

test {
    finalizedBy jacocoTestReport
}

compileJava {
    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
    options.compilerArgs << "-Amapstruct.unmappedTargetPolicy=IGNORE"
}
